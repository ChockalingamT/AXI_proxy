!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACC-app	accelerators.mk	/^ACC-app          = $(addsuffix -app, $(STRATUSHLS_ACC)) $(addsuffix -app, $(VIVADOHLS_ACC)) $(addsuffix -app, $(HLS4ML_ACC)) $(addsuffix -app, $(CHISEL_ACC)) $(addsuffix -app, $(CATAPULTHLS_ACC)) $(addsuffix -app, $(RTL_ACC)) $/;"	m
ACC-app-clean	accelerators.mk	/^ACC-app-clean    = $(addsuffix -app-clean, $(STRATUSHLS_ACC)) $(addsuffix -app-clean, $(VIVADOHLS_ACC)) $(addsuffix -app-clean, $(HLS4ML_ACC)) $(addsuffix -app-clean, $(CHISEL_ACC)) $(addsuffix -app-clean, $(CATAPULTHLS_ACC)) $(addsuffix -app-clean, $(RTL_ACC))$/;"	m
ACC-baremetal	accelerators.mk	/^ACC-baremetal        = $(addsuffix -baremetal, $(STRATUSHLS_ACC)) $(addsuffix -baremetal, $(VIVADOHLS_ACC)) $(addsuffix -baremetal, $(HLS4ML_ACC)) $(addsuffix -baremetal, $(CHISEL_ACC)) $(addsuffix -baremetal, $(CATAPULTHLS_ACC)) $(addsuffix -baremetal, $(RTL_ACC))$/;"	m
ACC-baremetal-clean	accelerators.mk	/^ACC-baremetal-clean  = $(addsuffix -baremetal-clean, $(STRATUSHLS_ACC)) $(addsuffix -baremetal-clean, $(VIVADOHLS_ACC)) $(addsuffix -baremetal-clean, $(HLS4ML_ACC)) $(addsuffix -baremetal-clean, $(CHISEL_ACC)) $(addsuffix -baremetal-clean, $(CATAPULTHLS_ACC)) $(addsuffix -baremetal-clean, $(RTL_ACC))$/;"	m
ACC-driver	accelerators.mk	/^ACC-driver       = $(addsuffix -driver, $(STRATUSHLS_ACC)) $(addsuffix -driver, $(VIVADOHLS_ACC)) $(addsuffix -driver, $(HLS4ML_ACC)) $(addsuffix -driver, $(CHISEL_ACC)) $(addsuffix -driver, $(CATAPULTHLS_ACC)) $(addsuffix -driver, $(RTL_ACC))$/;"	m
ACC-driver-clean	accelerators.mk	/^ACC-driver-clean = $(addsuffix -driver-clean, $(STRATUSHLS_ACC)) $(addsuffix -driver-clean, $(VIVADOHLS_ACC)) $(addsuffix -driver-clean, $(HLS4ML_ACC)) $(addsuffix -driver-clean, $(CHISEL_ACC)) $(addsuffix -driver-clean, $(CATAPULTHLS_ACC)) $(addsuffix -driver-clean, $(RTL_ACC))$/;"	m
ACC_PATHS	accelerators.mk	/^ACC_PATHS = $(STRATUSHLS_ACC_PATHS) $(VIVADOHLS_ACC_PATHS) $(CATAPULTHLS_ACC_PATHS) $(HLS4ML_ACC_PATHS) $(CHISEL_ACC_PATHS) $(RTL_ACC_PATHS)$/;"	m
ALL_RTL_SRCS	rtl.mk	/^ALL_RTL_SRCS  = $(VHDL_PKGS) $(VHDL_SRCS) $(VLOG_SRCS) $(IP_XCI_SRCS) $(DAT_SRCS)$/;"	m
ALL_SIM_SRCS	rtl.mk	/^ALL_SIM_SRCS  = $(SIM_VHDL_PKGS) $(SIM_VHDL_SRCS) $(SIM_VLOG_SRCS) $(IP_XCI_SRCS) $(DAT_SRCS)$/;"	m
ARCH	design.mk	/^ARCH=riscv$/;"	m
ARCH	design.mk	/^ARCH=sparc$/;"	m
ARIANE	ariane.mk	/^ARIANE ?= $(ESP_ROOT)\/rtl\/cores\/ariane\/ariane$/;"	m
ARIANE	rtl.mk	/^ARIANE := $(ESP_ROOT)\/rtl\/cores\/ariane\/ariane$/;"	m
ARIANE_RV_PLIC_REGMAP_GEN	esp.mk	/^ARIANE_RV_PLIC_REGMAP_GEN = $(ESP_ROOT)\/rtl\/cores\/ariane\/ariane\/src\/rv_plic\/rtl\/gen_plic_addrmap.py$/;"	m
ASIC_MEMGEN	asicgen.mk	/^ASIC_MEMGEN = $(ESP_ROOT)\/tools\/asicgen\/asic_memgen.py$/;"	m
ASIC_MEMGEN_OUT	asicgen.mk	/^ASIC_MEMGEN_OUT = ..\/$(DIRTECH_NAME)\/mem_wrappers$/;"	m
ASIC_PADGEN	asicgen.mk	/^ASIC_PADGEN = $(ESP_ROOT)\/tools\/asicgen\/asic_padgen.py$/;"	m
ASIC_PADGEN_OUT	asicgen.mk	/^ASIC_PADGEN_OUT = ..\/$(DIRTECH_NAME)\/pad_wrappers$/;"	m
ASIC_PADLOC	asicgen.mk	/^ASIC_PADLOC = $(ESP_ROOT)\/utils\/scripts\/asic\/pad_vh_loc.py$/;"	m
BAREMETAL_APPS	soft_common.mk	/^BAREMETAL_APPS           = $(filter-out include, $(shell ls -d $(BAREMETAL_APPS_PATH)\/*\/ | awk -F\/ '{print $$(NF-1)}'))$/;"	m
BAREMETAL_APPS-baremetal	soft_common.mk	/^BAREMETAL_APPS-baremetal = $(addsuffix -baremetal, $(BAREMETAL_APPS))$/;"	m
BAREMETAL_APPS-baremetal-clean	soft_common.mk	/^BAREMETAL_APPS-baremetal-clean = $(addsuffix -baremetal-clean, $(BAREMETAL_APPS))$/;"	m
BAREMETAL_APPS_PATH	soft_common.mk	/^BAREMETAL_APPS_PATH      = $(ESP_ROOT)\/soft\/common\/apps\/baremetal$/;"	m
BAREMETAL_APPS_PATHS	soft_common.mk	/^BAREMETAL_APPS_PATHS     = $(addprefix $(BAREMETAL_APPS_PATH)\/, $(BAREMETAL_APPS))$/;"	m
BSG_VLOG	bsg.mk	/^BSG_VLOG = vlog -quiet $(BSG_VLOG_OPT)$/;"	m
BSG_VLOG_SIM_SRCS	bsg.mk	/^BSG_VLOG_SIM_SRCS  = $(BSG_VLOG_SRCS)$/;"	m
CATAPULTHLS_ACC	accelerators.mk	/^CATAPULTHLS_ACC           = $(filter-out common, $(shell ls -d $(CATAPULTHLS_ACC_PATH)\/*\/ | awk -F\/ '{print $$(NF-1)}'))$/;"	m
CATAPULTHLS_ACC-clean	accelerators.mk	/^CATAPULTHLS_ACC-clean     = $(addsuffix -clean, $(CATAPULTHLS_ACC))$/;"	m
CATAPULTHLS_ACC-distclean	accelerators.mk	/^CATAPULTHLS_ACC-distclean = $(addsuffix -distclean, $(CATAPULTHLS_ACC))$/;"	m
CATAPULTHLS_ACC-exe	accelerators.mk	/^CATAPULTHLS_ACC-exe       = $(addsuffix -exe, $(CATAPULTHLS_ACC))$/;"	m
CATAPULTHLS_ACC-hls	accelerators.mk	/^CATAPULTHLS_ACC-hls       = $(addsuffix -hls, $(CATAPULTHLS_ACC))$/;"	m
CATAPULTHLS_ACC-plot	accelerators.mk	/^CATAPULTHLS_ACC-plot      = $(addsuffix -plot, $(CATAPULTHLS_ACC))$/;"	m
CATAPULTHLS_ACC-sim	accelerators.mk	/^CATAPULTHLS_ACC-sim       = $(addsuffix -sim, $(CATAPULTHLS_ACC))$/;"	m
CATAPULTHLS_ACC-wdir	accelerators.mk	/^CATAPULTHLS_ACC-wdir      = $(addsuffix -wdir, $(CATAPULTHLS_ACC))$/;"	m
CATAPULTHLS_ACC_PATH	accelerators.mk	/^CATAPULTHLS_ACC_PATH      = $(ESP_ROOT)\/accelerators\/catapult_hls$/;"	m
CATAPULTHLS_ACC_PATHS	accelerators.mk	/^CATAPULTHLS_ACC_PATHS     = $(addprefix $(CATAPULTHLS_ACC_PATH)\/, $(CATAPULTHLS_ACC))$/;"	m
CC	help.mk	/^CC  = LD_LIBRARY="" \/usr\/bin\/gcc$/;"	m
CHISEL_ACC	accelerators.mk	/^CHISEL_ACC           = $(shell ls $(CHISEL_ACC_PATH)\/*.scala | awk -F\/ '{print $$(NF)}' | sed 's\/\\.scala\/\/g')$/;"	m
CHISEL_ACC	accelerators.mk	/^CHISEL_ACC           =$/;"	m
CHISEL_ACC-clean	accelerators.mk	/^CHISEL_ACC-clean     = $(addsuffix -clean, $(CHISEL_ACC))$/;"	m
CHISEL_ACC-distclean	accelerators.mk	/^CHISEL_ACC-distclean = $(addsuffix -distclean, $(CHISEL_ACC))$/;"	m
CHISEL_ACC_PATH	accelerators.mk	/^CHISEL_ACC_PATH      = $(CHISEL_PATH)\/src\/main\/scala\/esp\/examples$/;"	m
CHISEL_ACC_PATHS	accelerators.mk	/^CHISEL_ACC_PATHS     = $(addprefix $(ESP_ROOT)\/accelerators\/chisel\/, $(CHISEL_ACC))$/;"	m
CHISEL_PATH	accelerators.mk	/^CHISEL_PATH          = $(ESP_ROOT)\/accelerators\/chisel\/hw$/;"	m
CROSS_COMPILE_ELF	design.mk	/^CROSS_COMPILE_ELF = riscv32-unknown-elf-$/;"	m
CROSS_COMPILE_ELF	design.mk	/^CROSS_COMPILE_ELF = riscv64-unknown-elf-$/;"	m
CROSS_COMPILE_ELF	design.mk	/^CROSS_COMPILE_ELF = sparc-elf-$/;"	m
CROSS_COMPILE_LINUX	design.mk	/^CROSS_COMPILE_LINUX = riscv64-unknown-linux-gnu-$/;"	m
CROSS_COMPILE_LINUX	design.mk	/^CROSS_COMPILE_LINUX = sparc-linux-$/;"	m
DAT_SRCS	rtl.mk	/^DAT_SRCS = $(shell (find $(ESP_ROOT)\/tech\/$(TECHLIB)\/ -name "*.dat" ))$/;"	m
DEVICE	design.mk	/^DEVICE = $(PART)-$(PACKAGE)-$(SPEED)$/;"	m
DEVICE	design.mk	/^DEVICE = ASIC-$(TECHLIB)$/;"	m
EMU_FREQ	esp.mk	/^EMU_FREQ = $(BASE_FREQ_MHZ)$/;"	m
EMU_TECH	esp.mk	/^EMU_TECH = "none"$/;"	m
EMU_TECH	esp.mk	/^EMU_TECH = $(OVR_TECHLIB)$/;"	m
ESPLINK_HDRS	esp.mk	/^ESPLINK_HDRS = $(wildcard $(ESP_ROOT)\/tools\/esplink\/src\/*.h)$/;"	m
ESPLINK_SRCS	esp.mk	/^ESPLINK_SRCS = $(wildcard $(ESP_ROOT)\/tools\/esplink\/src\/*.c)$/;"	m
ESPMON_DEPS	profpga.mk	/^ESPMON_DEPS  = $(ESP_ROOT)\/tools\/espmon\/espmonmain.ui$/;"	m
ESP_DEFCONFIG	esp.mk	/^ESP_DEFCONFIG ?= $(ESP_ROOT)\/socs\/defconfig\/esp_$(BOARD)_defconfig$/;"	m
EXAMPLES	examples.mk	/^EXAMPLES = $(filter-out common, $(shell ls -d $(EXAMPLES_PATH)\/*\/ | awk -F\/ '{print $$(NF-1)}'))$/;"	m
EXAMPLES_GEN	examples.mk	/^define EXAMPLES_GEN$/;"	m
EXAMPLES_OUT_PATH	examples.mk	/^EXAMPLES_OUT_PATH = $(SOFT_BUILD)\/apps\/examples$/;"	m
EXAMPLES_OUT_PATHS	examples.mk	/^EXAMPLES_OUT_PATHS = $(addprefix  $(EXAMPLES_OUT_PATH)\/, $(EXAMPLES))$/;"	m
EXAMPLES_PATH	examples.mk	/^EXAMPLES_PATH = $(ESP_ROOT)\/soft\/common\/apps\/examples\/$/;"	m
EXTRA_SIMTOP	design.mk	/^EXTRA_SIMTOP  = glbl$/;"	m
EXTRA_SIMTOP	design.mk	/^EXTRA_SIMTOP  =$/;"	m
FPGALIBS	design.mk	/^FPGALIBS = virtex7 virtexu virtexup$/;"	m
FPROGS	leon3_sw.mk	/^FPROGS=$(shell for i in $(PROGS); do \\$/;"	m
GENUS_VHDL	genus.mk	/^GENUS_VHDL = read_hdl -language vhdl$/;"	m
GENUS_VLOG	genus.mk	/^GENUS_VLOG = read_hdl -language sv $(GENUS_VLOGOPT)$/;"	m
GRLIB_DEFCONFIG	grlib.mk	/^GRLIB_DEFCONFIG ?= $(ESP_ROOT)\/socs\/defconfig\/grlib_defconfig$/;"	m
HLS4ML_ACC	accelerators.mk	/^HLS4ML_ACC           = $(filter-out common, $(shell ls -d $(HLS4ML_ACC_PATH)\/*\/ | awk -F\/ '{print $$(NF-1)}'))$/;"	m
HLS4ML_ACC-clean	accelerators.mk	/^HLS4ML_ACC-clean     = $(addsuffix -clean, $(HLS4ML_ACC))$/;"	m
HLS4ML_ACC-distclean	accelerators.mk	/^HLS4ML_ACC-distclean = $(addsuffix -distclean, $(HLS4ML_ACC))$/;"	m
HLS4ML_ACC-exe	accelerators.mk	/^HLS4ML_ACC-exe       = $(addsuffix -exe, $(HLS4ML_ACC))$/;"	m
HLS4ML_ACC-hls	accelerators.mk	/^HLS4ML_ACC-hls       = $(addsuffix -hls, $(HLS4ML_ACC))$/;"	m
HLS4ML_ACC-plot	accelerators.mk	/^HLS4ML_ACC-plot      = $(addsuffix -plot, $(HLS4ML_ACC))$/;"	m
HLS4ML_ACC-sim	accelerators.mk	/^HLS4ML_ACC-sim       = $(addsuffix -sim, $(HLS4ML_ACC))$/;"	m
HLS4ML_ACC-wdir	accelerators.mk	/^HLS4ML_ACC-wdir      = $(addsuffix -wdir, $(HLS4ML_ACC))$/;"	m
HLS4ML_ACC_PATH	accelerators.mk	/^HLS4ML_ACC_PATH      = $(ESP_ROOT)\/accelerators\/hls4ml$/;"	m
HLS4ML_ACC_PATHS	accelerators.mk	/^HLS4ML_ACC_PATHS     = $(addprefix $(HLS4ML_ACC_PATH)\/, $(HLS4ML_ACC))$/;"	m
IBEX	ibex.mk	/^IBEX ?= $(ESP_ROOT)\/rtl\/cores\/ibex\/ibex$/;"	m
INCDIR_INCISIVE	ncsim.mk	/^INCDIR_INCISIVE = $(foreach dir, $(INCDIR), -INCDIR $(dir))$/;"	m
INCDIR_MODELSIM	modelsim.mk	/^INCDIR_MODELSIM = $(foreach dir, $(INCDIR), +incdir+$(dir))$/;"	m
INCDIR_XCELIUM	xmsim.mk	/^INCDIR_XCELIUM = $(foreach dir, $(INCDIR), -INCDIR $(dir))$/;"	m
IP_XCI_SRCS	rtl.mk	/^IP_XCI_SRCS  = $(shell (find $(ESP_ROOT)\/tech\/$(TECHLIB) -name "*.xci" ))$/;"	m
JTAG_TEST_SCRIPTS_DIR	modelsim.mk	/^JTAG_TEST_SCRIPTS_DIR = $(ESP_ROOT)\/utils\/scripts\/jtag_test$/;"	m
JTAG_TEST_TILE	modelsim.mk	/^JTAG_TEST_TILE ?= 0$/;"	m
LD	help.mk	/^LD  = LD_LIBRARY="" \/usr\/bin\/ld$/;"	m
LDFLAGS	leon3_sw.mk	/^LDFLAGS = -lm$/;"	m
LINUX_CONFIG	design.mk	/^LINUX_CONFIG = $(CPU_ARCH)_defconfig$/;"	m
LINUX_CONFIG	design.mk	/^LINUX_CONFIG = $(CPU_ARCH)_smp_defconfig$/;"	m
LINUX_MAC	design.mk	/^LINUX_MAC ?= $(shell echo 0000$$(dd if=\/dev\/urandom count=1 2>\/dev\/null | md5sum | sed 's\/^\\(..\\)\\(..\\)\\(..\\)\\(..\\).*$$\/\\1\\2\\3\\4\/'))$/;"	m
MEMGEN	asicgen.mk	/^MEMGEN = $(ESP_ROOT)\/tools\/asicgen\/asic_plmgen.py$/;"	m
MEMGEN_OUT	asicgen.mk	/^MEMGEN_OUT = $(ESP_ROOT)\/tech\/$(TECHLIB)\/memgen\/slm_gen$/;"	m
MEMTECH	asicgen.mk	/^MEMTECH = ..\/$(DIRTECH_NAME)\/mem_wrappers$/;"	m
MMI64_DESP	profpga.mk	/^MMI64_DESP  = $(ESP_ROOT)\/tools\/mmi64\/mmi64.c$/;"	m
NCCOM	ncsim.mk	/^NCCOM     = ncvhdl $(NCCOMOPT)$/;"	m
NCELAB	ncsim.mk	/^NCELAB    = ncelab $(NCELABOPT)$/;"	m
NCLOG	ncsim.mk	/^NCLOG     = ncvlog -sv $(NCLOGOPT)$/;"	m
NCSIM	ncsim.mk	/^NCSIM     = ncsim $(NCSIMOPT)$/;"	m
NCUPDATE	ncsim.mk	/^NCUPDATE  = ncupdate$/;"	m
OFILES	leon3_sw.mk	/^OFILES = $(foreach of, $(FPROGS:%=%.o), $(SOFT_BUILD)\/grlib\/$(of))$/;"	m
OPENSBI	ariane.mk	/^OPENSBI = $(SOFT)\/opensbi$/;"	m
PROFPGA_CURRENT_VER	design.mk	/^PROFPGA_CURRENT_VER = $(shell basename $(PROFPGA))$/;"	m
PROFPGA_REQUIRED_VER	design.mk	/^PROFPGA_REQUIRED_VER = proFPGA-2021A$/;"	m
PROGS	leon3_sw.mk	/^PROGS = report_device apbuart divtest multest regtest \\$/;"	m
PROJ_DIR_PATH	asicgen.mk	/^	PROJ_DIR_PATH=$(realpath ..\/$PROJECT_NAME)$/;"	m
QCOM	questa.mk	/^QCOM = vcom -quiet -93 $(QCOMOPT)$/;"	m
QCOMOPT	questa.mk	/^QCOMOPT = $(VCOMOPT)$/;"	m
QLIB	questa.mk	/^QLIB = vlib$/;"	m
QLOG	questa.mk	/^QLOG = vlog -sv -quiet $(QLOGOPT)$/;"	m
QLOGOPT	questa.mk	/^QLOGOPT = $(VLOGOPT)$/;"	m
QSIM	questa.mk	/^QSIM = vsim $(QSIMOPT)$/;"	m
QSIMOPT	questa.mk	/^QSIMOPT = $(VSIMOPT)$/;"	m
QUIET_AR	help.mk	/^	QUIET_AR            = @echo '   ' AR $@;$/;"	m
QUIET_AS	help.mk	/^	QUIET_AS            = @echo '   ' AS $@;$/;"	m
QUIET_BUILD	help.mk	/^	QUIET_BUILD         = @echo '   ' BUILD $@;$/;"	m
QUIET_CC	help.mk	/^	QUIET_CC            = @echo '   ' CC $@;$/;"	m
QUIET_CHECK	help.mk	/^	QUIET_CHECK         = @echo '   ' CHECK $(subst .o,.c,$@);$/;"	m
QUIET_CHECKPATCH	help.mk	/^	QUIET_CHECKPATCH    = @echo '   ' CHECKPATCH $(subst .o,.c,$@);$/;"	m
QUIET_CHMOD	help.mk	/^	QUIET_CHMOD         = @echo '   ' CHMOD $@;$/;"	m
QUIET_CLEAN	help.mk	/^	QUIET_CLEAN         = @echo '   ' CLEAN $@;$/;"	m
QUIET_CP	help.mk	/^	QUIET_CP            = @echo '   ' CP $@;$/;"	m
QUIET_CXX	help.mk	/^	QUIET_CXX           = @echo '   ' CXX $@;$/;"	m
QUIET_DIFF	help.mk	/^	QUIET_DIFF          = @echo -n '   ' DIFF '';$/;"	m
QUIET_INFO	help.mk	/^	QUIET_INFO          = @echo -n '   ' INFO '';$/;"	m
QUIET_LINK	help.mk	/^	QUIET_LINK          = @echo '   ' LINK $@;$/;"	m
QUIET_MAKE	help.mk	/^	QUIET_MAKE          = @echo '   ' MAKE $@;$/;"	m
QUIET_MKDIR	help.mk	/^	QUIET_MKDIR         = @echo '   ' MKDIR $@;$/;"	m
QUIET_OBJCP	help.mk	/^	QUIET_OBJCP         = @echo '   ' OBJCP $@;$/;"	m
QUIET_RM	help.mk	/^	QUIET_RM            = @echo '   ' RM $@;$/;"	m
QUIET_RUN	help.mk	/^	QUIET_RUN           = @echo '   ' RUN $@;$/;"	m
RISCV_CFLAGS	ariane.mk	/^RISCV_CFLAGS  = -I$(RISCV_TESTS)\/env$/;"	m
RISCV_CFLAGS	ibex.mk	/^RISCV_CFLAGS  = -I$(RISCV_TESTS)\/env$/;"	m
RISCV_PK	ariane.mk	/^RISCV_PK = $(SOFT)\/riscv-pk$/;"	m
RISCV_PK	ibex.mk	/^RISCV_PK = $(SOFT)\/riscv-pk$/;"	m
RISCV_TESTS	ariane.mk	/^RISCV_TESTS = $(SOFT)\/riscv-tests$/;"	m
RISCV_TESTS	ibex.mk	/^RISCV_TESTS = $(SOFT)\/riscv-tests$/;"	m
RM	help.mk	/^RM  = rm -rf$/;"	m
RTL_ACC	accelerators.mk	/^RTL_ACC           = $(filter-out common, $(shell ls -d $(RTL_ACC_PATH)\/*\/ | awk -F\/ '{print $$(NF-1)}'))$/;"	m
RTL_ACC-clean	accelerators.mk	/^RTL_ACC-clean     = $(addsuffix -clean, $(RTL_ACC))$/;"	m
RTL_ACC-distclean	accelerators.mk	/^RTL_ACC-distclean = $(addsuffix -distclean, $(RTL_ACC))$/;"	m
RTL_ACC-hls	accelerators.mk	/^RTL_ACC-hls       = $(addsuffix -hls, $(RTL_ACC))$/;"	m
RTL_ACC-wdir	accelerators.mk	/^RTL_ACC-wdir      = $(addsuffix -wdir, $(RTL_ACC))$/;"	m
RTL_ACC_PATH	accelerators.mk	/^RTL_ACC_PATH      = $(ESP_ROOT)\/accelerators\/rtl$/;"	m
RTL_ACC_PATHS	accelerators.mk	/^RTL_ACC_PATHS     = $(addprefix $(RTL_ACC_PATH)\/, $(RTL_ACC))$/;"	m
RTL_TECH_FOLDERS	rtl.mk	/^RTL_TECH_FOLDERS = $(shell ls -d $(ESP_ROOT)\/tech\/$(TECHLIB)\/*\/)$/;"	m
SCCS	sc_caches.mk	/^SCCS			= $(foreach p, $(SCCS_PATH), $(filter-out common utils, $(shell ls -d $(p)\/*\/ | awk -F\/ '{print $$(NF-1)}')))$/;"	m
SCCS-clean	sc_caches.mk	/^SCCS-clean		= $(addsuffix -clean, $(SCCS))$/;"	m
SCCS-distclean	sc_caches.mk	/^SCCS-distclean	= $(addsuffix -distclean, $(SCCS))$/;"	m
SCCS-hls	sc_caches.mk	/^SCCS-hls		= $(addsuffix -hls, $(SCCS))$/;"	m
SCCS-sim	sc_caches.mk	/^SCCS-sim		= $(addsuffix -sim, $(SCCS))$/;"	m
SCCS-wdir	sc_caches.mk	/^SCCS-wdir		= $(addsuffix -wdir, $(SCCS))$/;"	m
SCCS_PATH	sc_caches.mk	/^SCCS_PATH		= $(ESP_ROOT)\/rtl\/caches\/esp-caches\/systemc$/;"	m
SOCKETGEN_DEPS	accelerators.mk	/^SOCKETGEN_DEPS  = $(ESP_ROOT)\/tech\/$(TECHLIB)\/acc\/installed.log$/;"	m
SPACES	help.mk	/^	SPACES              = "    "$/;"	m
SPACING	help.mk	/^	SPACING             = echo -n "    ";$/;"	m
SSH_PORT	utils.mk	/^SSH_PORT = 22$/;"	m
STRATUSHLS_ACC	accelerators.mk	/^STRATUSHLS_ACC           = $(filter-out common, $(shell ls -d $(STRATUSHLS_ACC_PATH)\/*\/ | awk -F\/ '{print $$(NF-1)}'))$/;"	m
STRATUSHLS_ACC-clean	accelerators.mk	/^STRATUSHLS_ACC-clean     = $(addsuffix -clean, $(STRATUSHLS_ACC))$/;"	m
STRATUSHLS_ACC-distclean	accelerators.mk	/^STRATUSHLS_ACC-distclean = $(addsuffix -distclean, $(STRATUSHLS_ACC))$/;"	m
STRATUSHLS_ACC-exe	accelerators.mk	/^STRATUSHLS_ACC-exe       = $(addsuffix -exe, $(STRATUSHLS_ACC))$/;"	m
STRATUSHLS_ACC-hls	accelerators.mk	/^STRATUSHLS_ACC-hls       = $(addsuffix -hls, $(STRATUSHLS_ACC))$/;"	m
STRATUSHLS_ACC-plot	accelerators.mk	/^STRATUSHLS_ACC-plot      = $(addsuffix -plot, $(STRATUSHLS_ACC))$/;"	m
STRATUSHLS_ACC-sim	accelerators.mk	/^STRATUSHLS_ACC-sim       = $(addsuffix -sim, $(STRATUSHLS_ACC))$/;"	m
STRATUSHLS_ACC-wdir	accelerators.mk	/^STRATUSHLS_ACC-wdir      = $(addsuffix -wdir, $(STRATUSHLS_ACC))$/;"	m
STRATUSHLS_ACC_PATH	accelerators.mk	/^STRATUSHLS_ACC_PATH      = $(ESP_ROOT)\/accelerators\/stratus_hls$/;"	m
STRATUSHLS_ACC_PATHS	accelerators.mk	/^STRATUSHLS_ACC_PATHS     = $(addprefix $(STRATUSHLS_ACC_PATH)\/, $(STRATUSHLS_ACC))$/;"	m
TARGET_SCCS_PATH	sc_caches.mk	/^define TARGET_SCCS_PATH =$/;"	m
TARGET_SCCS_PATH_TMP	sc_caches.mk	/^define TARGET_SCCS_PATH_TMP =$/;"	m
TECH_TYPE	design.mk	/^TECH_TYPE = fpga$/;"	m
THIRDPARTY_ACC	accelerators.mk	/^THIRDPARTY_ACC  = ""$/;"	m
THIRDPARTY_ACC	accelerators.mk	/^THIRDPARTY_ACC  = $(foreach acc, $(shell ls $(THIRDPARTY_PATH)), $(shell if grep -q $(CONFIG_DMA_NOC_WIDTH) $(THIRDPARTY_PATH)\/$(acc)\/$(acc).dma_widths; then echo $(acc); fi))$/;"	m
THIRDPARTY_ACC-clean	accelerators.mk	/^THIRDPARTY_ACC-clean     = $(addsuffix -clean, $(THIRDPARTY_ACC))$/;"	m
THIRDPARTY_ACC-distclean	accelerators.mk	/^THIRDPARTY_ACC-distclean = $(addsuffix -distclean, $(THIRDPARTY_ACC))$/;"	m
THIRDPARTY_ACC_PRINT	accelerators.mk	/^THIRDPARTY_ACC_PRINT  = $(foreach acc, $(shell ls $(THIRDPARTY_PATH)), $(shell echo $(acc)))$/;"	m
THIRDPARTY_INCDIR	accelerators.mk	/^THIRDPARTY_INCDIR     = $(foreach acc, $(THIRDPARTY_ACC), $(shell if test -r $(THIRDPARTY_PATH)\/$(acc)\/vlog_incdir; then echo -n $(THIRDPARTY_PATH)\/$(acc)\/vlog_incdir; else echo -n ""; fi))$/;"	m
THIRDPARTY_PATH	accelerators.mk	/^THIRDPARTY_PATH = $(ESP_ROOT)\/accelerators\/third-party$/;"	m
THIRDPARTY_SVLOG	accelerators.mk	/^THIRDPARTY_SVLOG      = $(foreach acc, $(THIRDPARTY_ACC), $(foreach rtl, $(shell strings $(THIRDPARTY_PATH)\/$(acc)\/$(acc).sverilog), $(shell f=$(THIRDPARTY_PATH)\/$(acc)\/out\/$(rtl); if test -e $$f; then echo $$f; fi;)))$/;"	m
THIRDPARTY_VHDL	accelerators.mk	/^THIRDPARTY_VHDL       = $(foreach acc, $(THIRDPARTY_ACC), $(foreach rtl, $(shell strings $(THIRDPARTY_PATH)\/$(acc)\/$(acc).vhdl),     $(shell f=$(THIRDPARTY_PATH)\/$(acc)\/out\/$(rtl); if test -e $$f; then echo $$f; fi;)))$/;"	m
THIRDPARTY_VHDL_PKGS	accelerators.mk	/^THIRDPARTY_VHDL_PKGS  = $(foreach acc, $(THIRDPARTY_ACC), $(foreach rtl, $(shell strings $(THIRDPARTY_PATH)\/$(acc)\/$(acc).pkgs),     $(shell f=$(THIRDPARTY_PATH)\/$(acc)\/out\/$(rtl); if test -e $$f; then echo $$f; fi;)))$/;"	m
THIRDPARTY_VLOG	accelerators.mk	/^THIRDPARTY_VLOG       = $(foreach acc, $(THIRDPARTY_ACC), $(shell f=$(THIRDPARTY_PATH)\/$(acc)\/out; l=$$(readlink $$f); if test -e $(THIRDPARTY_PATH)\/$(acc)\/$$l; then echo $(THIRDPARTY_PATH)\/$(acc)\/$(acc)_wrapper.v; fi))$/;"	m
TKCONFIG	grlib.mk	/^TKCONFIG   = $(ESP_ROOT)\/utils\/grlib_tkconfig$/;"	m
TKCONFIG_DEP	grlib.mk	/^TKCONFIG_DEP   = $(TKCONFIG)\/config.vhd$/;"	m
UTILS_GRLIB	grlib.mk	/^UTILS_GRLIB = $(ESP_ROOT)\/soft\/leon3\/grlib$/;"	m
VCOM	modelsim.mk	/^VCOM = vcom -quiet -93 $(VCOMOPT)$/;"	m
VERILOG_PROFPGA	profpga.mk	/^VERILOG_PROFPGA = $(shell strings $(FLISTS)\/profpga_vlog.flist)$/;"	m
VHDL_PROFPGA	profpga.mk	/^VHDL_PROFPGA    = $(shell strings $(FLISTS)\/profpga_vhdl.flist)$/;"	m
VIVADOHLS_ACC	accelerators.mk	/^VIVADOHLS_ACC           = $(filter-out common, $(shell ls -d $(VIVADOHLS_ACC_PATH)\/*\/ | awk -F\/ '{print $$(NF-1)}'))$/;"	m
VIVADOHLS_ACC-clean	accelerators.mk	/^VIVADOHLS_ACC-clean     = $(addsuffix -clean, $(VIVADOHLS_ACC))$/;"	m
VIVADOHLS_ACC-distclean	accelerators.mk	/^VIVADOHLS_ACC-distclean = $(addsuffix -distclean, $(VIVADOHLS_ACC))$/;"	m
VIVADOHLS_ACC-exe	accelerators.mk	/^VIVADOHLS_ACC-exe       = $(addsuffix -exe, $(VIVADOHLS_ACC))$/;"	m
VIVADOHLS_ACC-hls	accelerators.mk	/^VIVADOHLS_ACC-hls       = $(addsuffix -hls, $(VIVADOHLS_ACC))$/;"	m
VIVADOHLS_ACC-plot	accelerators.mk	/^VIVADOHLS_ACC-plot      = $(addsuffix -plot, $(VIVADOHLS_ACC))$/;"	m
VIVADOHLS_ACC-sim	accelerators.mk	/^VIVADOHLS_ACC-sim       = $(addsuffix -sim, $(VIVADOHLS_ACC))$/;"	m
VIVADOHLS_ACC-wdir	accelerators.mk	/^VIVADOHLS_ACC-wdir      = $(addsuffix -wdir, $(VIVADOHLS_ACC))$/;"	m
VIVADOHLS_ACC_PATH	accelerators.mk	/^VIVADOHLS_ACC_PATH      = $(ESP_ROOT)\/accelerators\/vivado_hls$/;"	m
VIVADOHLS_ACC_PATHS	accelerators.mk	/^VIVADOHLS_ACC_PATHS     = $(addprefix $(VIVADOHLS_ACC_PATH)\/, $(VIVADOHLS_ACC))$/;"	m
VIVADO_BATCH_OPT	vivado.mk	/^VIVADO_BATCH_OPT = -mode batch -quiet -notrace$/;"	m
VLIB	modelsim.mk	/^VLIB = vlib$/;"	m
VLOG	modelsim.mk	/^VLOG = vlog -sv -quiet $(VLOGOPT)$/;"	m
VSIM	modelsim.mk	/^VSIM = VSIMOPT='$(VSIMOPT)' TECHLIB=$(TECHLIB) ESP_ROOT=$(ESP_ROOT) vsim $(VSIMOPT)$/;"	m
XAR	leon3_sw.mk	/^XAR     = $(CROSS_COMPILE_ELF)ar$/;"	m
XAS	leon3_sw.mk	/^XAS     = $(CROSS_COMPILE_ELF)gcc -c -I. $(XINC) $(BOPT)$/;"	m
XCC	leon3_sw.mk	/^XCC     = $(CROSS_COMPILE_ELF)gcc $(XINC) $(BOPT)$/;"	m
XCFLAGS	leon3_sw.mk	/^XCFLAGS = -O2 -g -msoft-float$/;"	m
XDC	vivado.mk	/^XDC   = $(ESP_ROOT)\/constraints\/$(BOARD)\/$(BOARD)$(XDC_SUFFIX).xdc$/;"	m
XDC_EMU_SUFFIX	vivado.mk	/^XDC_EMU_SUFFIX = -chip-emu$/;"	m
XDC_SUFFIX	vivado.mk	/^XDC_SUFFIX = -fpga-proxy$/;"	m
XDC_SUFFIX	vivado.mk	/^XDC_SUFFIX =$/;"	m
XLDFLAGS	leon3_sw.mk	/^XLDFLAGS=-L$(SOFT_BUILD)\/ $(SOFT_BUILD)\/lib3tests.a $(LDFLAGS)$/;"	m
XMCOM	xmsim.mk	/^XMCOM     = xmvhdl  $(XMCOMOPT)$/;"	m
XMELAB	xmsim.mk	/^XMELAB    = xmelab $(XMELABOPT)$/;"	m
XMLOG	xmsim.mk	/^XMLOG     = xmvlog -sv $(XMLOGOPT)$/;"	m
XMSIM	xmsim.mk	/^XMSIM     = xmsim $(XMSIMOPT)$/;"	m
XMUPDATE	xmsim.mk	/^XMUPDATE  = xmupdate$/;"	m
ZYNQ	zynq.mk	/^ZYNQ = $(ESP_ROOT)\/utils\/zynq$/;"	m
ZYNQ_BOARD	zynq.mk	/^ZYNQ_BOARD = $(shell echo $(BOARD) | cut -d "-" -f 2)$/;"	m
ZYNQ_ROOT	zynq.mk	/^	ZYNQ_ROOT=$(ZYNQ) BOARD=$(ZYNQ_BOARD) TOP=$(TOP) DESIGN=$(DESIGN) OUT=$(DESIGN_PATH)\/zynq VIVADO_BUILD=$(DESIGN_PATH)\/vivado $(MAKE) -C $(ZYNQ) sd-card$/;"	m
ZYNQ_ROOT	zynq.mk	/^	ZYNQ_ROOT=$(ZYNQ) BOARD=$(ZYNQ_BOARD) TOP=$(TOP) DESIGN=$(DESIGN) OUT=$(DESIGN_PATH)\/zynq VIVADO_BUILD=$(DESIGN_PATH)\/vivado $(MAKE) -C $(ZYNQ) sdk$/;"	m
